# Set working directory (optional for RStudio users)
if (requireNamespace("rstudioapi", quietly = TRUE)) {
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
}
# Local Level Model Simulation and Kalman Filtering in R
# Load required libraries
library(dlm)      # For Kalman filtering and smoothing
library(ggplot2)  # For visualization
# 1. Simulate the Local Level Model
set.seed(123)
T <- 100
Q <- 0.1          # State noise variance
R <- 0.5          # Observation noise variance
# Initialize vectors
alpha <- numeric(T)
y <- numeric(T)
# Set initial state
alpha[1] <- 0
# Generate data
for (t in 2:T) {
alpha[t] <- alpha[t-1] + rnorm(1, 0, sqrt(Q))
}
y <- alpha + rnorm(T, 0, sqrt(R))
# Combine into a data frame
data <- data.frame(time = 1:T, y = y, state = alpha)
# 2. Define the local level model in dlm
buildLocalLevel <- function(parm) {
dlmModPoly(order = 1, dV = exp(parm[1]), dW = exp(parm[2]))
}
# 3. Maximum Likelihood Estimation
fitMLE <- dlmMLE(y, parm = log(c(var(y), var(y))), buildLocalLevel)
modelFitted <- buildLocalLevel(fitMLE$par)
# Estimated parameters
sigma2_obs <- exp(fitMLE$par[1])
sigma2_state <- exp(fitMLE$par[2])
cat("MLE Estimates:\n")
cat("Observation noise variance (R):", sigma2_obs, "\n")
cat("State noise variance (Q):", sigma2_state, "\n")
# 4. Kalman Filtering
kalmanFiltered <- dlmFilter(y, modelFitted)
# 5. Kalman Smoothing
kalmanSmoothed <- dlmSmooth(kalmanFiltered)
# Extract filtered and smoothed states
filtered_state <- dropFirst(kalmanFiltered$m)
smoothed_state <- dropFirst(kalmanSmoothed$s)
# 6. Visualization of results
df_result <- data.frame(
time = 1:T,
Observed = y,
TrueState = alpha,
FilteredState = filtered_state,
SmoothedState = smoothed_state
)
ggplot(df_result, aes(x = time)) +
geom_point(aes(y = Observed), color = 'grey', size = 1, alpha = 0.7) +
geom_line(aes(y = TrueState), color = 'blue', size = 1.1, linetype = "dashed") +
geom_line(aes(y = FilteredState), color = 'red', size = 1.1) +
geom_line(aes(y = SmoothedState), color = 'darkgreen', size = 1.1) +
labs(title = "Local Level Model: Filtering and Smoothing",
y = "Value", x = "Time") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = c("Observed" = "grey", "True" = "blue", "Filtered" = "red", "Smoothed" = "darkgreen"))
# 7. Log-likelihood from Kalman filter
logLik_value <- dlmLL(y, modelFitted)
cat("\nLog-Likelihood:", logLik_value, "\n")
# Set working directory (optional for RStudio users)
if (requireNamespace("rstudioapi", quietly = TRUE)) {
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
}
# Load libraries
library(dlm)
library(ggplot2)
# Set seed for reproducibility
set.seed(123)
# Parameters
N <- 100  # Sample size
sigma_eta <- 0.5  # State noise (standard deviation)
sigma_e <- 1.0    # Observation noise (standard deviation)
# Simulate local level state-space model data
alpha <- numeric(N)
alpha[1] <- rnorm(1, 0, 10)  # Initial state (diffuse)
for (t in 2:N) {
alpha[t] <- alpha[t - 1] + rnorm(1, 0, sigma_eta)
}
y <- alpha + rnorm(N, 0, sigma_e)
# Introduce missing observations randomly (10%)
missing_indices <- sample(1:N, size = round(0.1 * N), replace = FALSE)
y_missing <- y
y_missing[missing_indices] <- NA
# Build local level model (unknown parameters to estimate via MLE)
build_model <- function(theta) {
dlmModPoly(order = 1, dV = exp(theta[1]), dW = exp(theta[2]))
}
# Initial guess for parameters (log-scale)
init_theta <- log(c(var(y_missing, na.rm=TRUE), var(y_missing, na.rm=TRUE)/10))
# Estimate parameters via Maximum Likelihood
fit <- dlmMLE(y_missing, parm = init_theta, build = build_model)
# Extract estimated variances
estimated_sigma_e2 <- exp(fit$par[1])
estimated_sigma_eta2 <- exp(fit$par[2])
cat("Estimated observation variance (sigma_e^2):", estimated_sigma_e2, "\n")
cat("Estimated state variance (sigma_eta^2):", estimated_sigma_eta2, "\n")
# Construct fitted model
fitted_model <- build_model(fit$par)
# Kalman filtering and smoothing
filtered <- dlmFilter(y_missing, fitted_model)
smoothed <- dlmSmooth(filtered)
# Interpolate missing values
y_interpolated <- y_missing
y_interpolated[missing_indices] <- dropFirst(filtered$m)[missing_indices]
# Compare Initialization Methods
# Diffuse initialization (default)
filtered_diffuse <- dlmFilter(y_missing, fitted_model)
# Informed initialization (small variance at the initial state)
informed_model <- fitted_model
informed_model$m0 <- mean(y_missing, na.rm=TRUE)
informed_model$C0 <- 0.01  # Low variance initialization
filtered_informed <- dlmFilter(y_missing, informed_model)
# Prepare data for plotting
data_plot <- data.frame(
Time = 1:N,
Observed = y,
Observed_Missing = y_missing,
True_State = alpha,
Filtered_Diffuse = dropFirst(filtered_diffuse$m),
Filtered_Informed = dropFirst(filtered_informed$m),
Smoothed = dropFirst(smoothed$s),
Interpolated = y_interpolated
)
# Melt data for ggplot2
library(reshape2)
plot_data <- melt(data_plot, id.vars = "Time")
# Plot (corrected ggplot2 syntax)
p <- ggplot(plot_data, aes(x = Time, y = value, color = variable, linetype = variable)) +
geom_line(linewidth = 1) +
scale_color_manual(
values = c("black", "grey", "blue", "red", "orange", "green", "purple"),
breaks = c("Observed", "Observed_Missing", "True_State", "Filtered_Diffuse",
"Filtered_Informed", "Smoothed", "Interpolated"),
labels = c("Observed", "Observed with Missing", "True State", "Filtered (Diffuse)",
"Filtered (Informed)", "Smoothed", "Interpolated")
) +
scale_linetype_manual(
values = c("solid", "blank", "solid", "dashed", "dotdash", "solid", "solid"),
breaks = c("Observed", "Observed_Missing", "True_State", "Filtered_Diffuse",
"Filtered_Informed", "Smoothed", "Interpolated"),
labels = c("Observed", "Observed with Missing", "True State", "Filtered (Diffuse)",
"Filtered (Informed)", "Smoothed", "Interpolated")
) +
labs(title = "Local Level Model with Kalman Filtering and Smoothing",
y = "Value", x = "Time") +
theme_minimal() +
theme(legend.title = element_blank())
# Save the plot to your working directory
ggsave(filename = "local_level_kalman_plot.png", plot = p, width = 10, height = 6)
# Display plot
print(p)
# Analyze initialization effects numerically
diff_init_effect <- mean(abs(data_plot$Filtered_Diffuse - data_plot$Filtered_Informed), na.rm=TRUE)
cat("Mean absolute difference between diffuse and informed initialization filtering:",
round(diff_init_effect, 4), "\n")
# Load libraries
library(dlm)
library(ggplot2)
library(reshape2)
# Set seed for reproducibility
set.seed(123)
# Parameters
N <- 100  # Sample size
sigma_eta <- 0.5  # State noise (sd)
sigma_e <- 1.0    # Observation noise (sd)
# Simulate local level state-space model data
alpha <- numeric(N)
alpha[1] <- rnorm(1, 0, 10)  # Initial state
for (t in 2:N) {
alpha[t] <- alpha[t - 1] + rnorm(1, 0, sigma_eta)
}
y <- alpha + rnorm(N, 0, sigma_e)
# Introduce missing observations (random ~10%)
missing_indices <- sort(sample(1:N, size = round(0.1 * N), replace = FALSE))
y_missing <- y
y_missing[missing_indices] <- NA
# Build and estimate model via MLE
build_model <- function(theta) {
dlmModPoly(order = 1, dV = exp(theta[1]), dW = exp(theta[2]))
}
init_theta <- log(c(var(y_missing, na.rm=TRUE), var(y_missing, na.rm=TRUE)/10))
fit <- dlmMLE(y_missing, parm = init_theta, build = build_model)
# Extract estimated parameters
estimated_sigma_e2 <- exp(fit$par[1])
estimated_sigma_eta2 <- exp(fit$par[2])
# Kalman Filtering and Smoothing
fitted_model <- build_model(fit$par)
filtered <- dlmFilter(y_missing, fitted_model)
smoothed <- dlmSmooth(filtered)
# Interpolate missing values
y_interpolated <- y_missing
y_interpolated[missing_indices] <- dropFirst(filtered$m)[missing_indices]
# Effect of initialization
filtered_diffuse <- filtered
informed_model <- fitted_model
informed_model$m0 <- mean(y_missing, na.rm=TRUE)
informed_model$C0 <- 0.01
filtered_informed <- dlmFilter(y_missing, informed_model)
# Data for plotting
data_plot <- data.frame(
Time = 1:N,
Observed = y,
True_State = alpha,
Filtered_Diffuse = dropFirst(filtered_diffuse$m),
Filtered_Informed = dropFirst(filtered_informed$m),
Smoothed = dropFirst(smoothed$s),
Interpolated = y_interpolated
)
# Melt data for ggplot
plot_data <- melt(data_plot, id.vars = "Time")
# Identify intervals of missing values
missing_intervals <- split(missing_indices, cumsum(c(1, diff(missing_indices) > 1)))
missing_ranges <- data.frame(
start = sapply(missing_intervals, min),
end = sapply(missing_intervals, max)
)
# Plot
p <- ggplot(plot_data, aes(x = Time, y = value, color = variable, linetype = variable)) +
geom_line(linewidth = 1) +
scale_color_manual(
values = c("black", "blue", "red", "orange", "darkgreen", "purple"),
breaks = c("Observed", "True_State", "Filtered_Diffuse",
"Filtered_Informed", "Smoothed", "Interpolated"),
labels = c("Observed", "True State", "Filtered (Diffuse)",
"Filtered (Informed)", "Smoothed", "Interpolated")
) +
scale_linetype_manual(
values = c("solid", "solid", "dashed", "dotdash", "solid", "solid"),
breaks = c("Observed", "True_State", "Filtered_Diffuse",
"Filtered_Informed", "Smoothed", "Interpolated"),
labels = c("Observed", "True State", "Filtered (Diffuse)",
"Filtered (Informed)", "Smoothed", "Interpolated")
) +
labs(title = "Local Level Model with Kalman Filtering and Smoothing",
y = "Value", x = "Time") +
theme_minimal() +
theme(legend.title = element_blank())
# Add vertical lines to indicate missing intervals
for(i in 1:nrow(missing_ranges)){
p <- p + geom_vline(xintercept = c(missing_ranges$start[i] - 0.5,
missing_ranges$end[i] + 0.5),
color = "gray", linetype = "dotted", linewidth = 0.8)
}
# Save plot
ggsave(filename = "local_level_kalman_plot.png", plot = p, width = 10, height = 6)
# Display plot
print(p)
# Numerical comparison of initialization methods
diff_init_effect <- mean(abs(data_plot$Filtered_Diffuse - data_plot$Filtered_Informed), na.rm=TRUE)
cat("Mean absolute difference between diffuse and informed initialization filtering:",
round(diff_init_effect, 4), "\n")
# Load libraries
library(dlm)
library(ggplot2)
library(reshape2)
# Set seed for reproducibility
set.seed(123)
# Parameters
N <- 100  # Sample size
sigma_eta <- 0.5  # State noise (sd)
sigma_e <- 1.0    # Observation noise (sd)
# Simulate local level model data
alpha <- numeric(N)
alpha[1] <- rnorm(1, 0, 10)
for (t in 2:N) {
alpha[t] <- alpha[t - 1] + rnorm(1, 0, sigma_eta)
}
y <- alpha + rnorm(N, 0, sigma_e)
# Introduce missing observations (~10% random)
missing_indices <- sort(sample(1:N, size = round(0.1 * N), replace = FALSE))
y_missing <- y
y_missing[missing_indices] <- NA
# Model building function
build_model <- function(theta) {
dlmModPoly(order = 1, dV = exp(theta[1]), dW = exp(theta[2]))
}
# MLE estimation of model parameters
init_theta <- log(c(var(y_missing, na.rm=TRUE), var(y_missing, na.rm=TRUE)/10))
fit <- dlmMLE(y_missing, parm = init_theta, build = build_model)
# Estimated model parameters
fitted_model <- build_model(fit$par)
# Kalman filtering and smoothing
filtered <- dlmFilter(y_missing, fitted_model)
smoothed <- dlmSmooth(filtered)
# Interpolate missing values
y_interpolated <- y_missing
y_interpolated[missing_indices] <- dropFirst(filtered$m)[missing_indices]
# Investigate initialization effects
# Diffuse initialization (default)
filtered_diffuse <- filtered
# Informed initialization (tight prior)
informed_model <- fitted_model
informed_model$m0 <- mean(y_missing, na.rm=TRUE)
informed_model$C0 <- 0.01
filtered_informed <- dlmFilter(y_missing, informed_model)
# Prepare data for plotting
data_plot <- data.frame(
Time = 1:N,
Observed = y,
True_State = alpha,
Filtered_Diffuse = dropFirst(filtered_diffuse$m),
Filtered_Informed = dropFirst(filtered_informed$m),
Smoothed = dropFirst(smoothed$s),
Interpolated = y_interpolated
)
# Melt data for ggplot
plot_data <- melt(data_plot, id.vars = "Time")
# Plot results
p <- ggplot(plot_data, aes(x = Time, y = value, color = variable, linetype = variable)) +
geom_line(linewidth = 1) +
scale_color_manual(
values = c("black", "blue", "red", "orange", "darkgreen", "purple"),
breaks = c("Observed", "True_State", "Filtered_Diffuse",
"Filtered_Informed", "Smoothed", "Interpolated"),
labels = c("Observed", "True State", "Filtered (Diffuse)",
"Filtered (Informed)", "Smoothed", "Interpolated")
) +
scale_linetype_manual(
values = c("solid", "solid", "dashed", "dotdash", "solid", "solid"),
breaks = c("Observed", "True_State", "Filtered_Diffuse",
"Filtered_Informed", "Smoothed", "Interpolated"),
labels = c("Observed", "True State", "Filtered (Diffuse)",
"Filtered (Informed)", "Smoothed", "Interpolated")
) +
labs(title = "Local Level Model: Kalman Filter and Smoother",
y = "Value", x = "Time") +
theme_minimal() +
theme(legend.title = element_blank())
# Add vertical grey lines at missing observations
p <- p + geom_vline(xintercept = missing_indices, color = "grey", linetype = "dotted")
# Save plot
ggsave(filename = "local_level_kalman_plot.png", plot = p, width = 10, height = 6)
# Display plot
print(p)
# Numeric comparison between initialization methods
diff_init_effect <- mean(abs(data_plot$Filtered_Diffuse - data_plot$Filtered_Informed), na.rm=TRUE)
cat("Mean absolute difference between diffuse and informed initialization filtering:",
round(diff_init_effect, 4), "\n")
