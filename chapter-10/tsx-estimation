 # TSX Estimator Function
TSX <- function(priceX, slowFreq, fastFreq) {
  # Compute log prices
  logPrice <- log(priceX)
  
  # Determine the number of bins for each frequency
  binSlow <- floor(nrow(logPrice) / slowFreq)
  binFast <- floor(nrow(logPrice) / fastFreq)
  
  # Initialize matrix for slow frequency realized volatility
  rvSlowSum <- matrix(0, ncol = ncol(logPrice), nrow = ncol(logPrice))
  for (j in 1:slowFreq) {
    # Extract subsample at slow frequency
    indices <- seq(j + nrow(logPrice) %% slowFreq, by = slowFreq, length.out = binSlow)
    subLog <- logPrice[indices, ]
    subReturn <- diff(subLog)
    
    # Accumulate the outer product of returns
    rvSlowSum <- rvSlowSum + t(subReturn) %*% subReturn
  }
  rvSlow <- rvSlowSum / slowFreq
  
  # Initialize matrix for fast frequency realized volatility
  rvFastSum <- matrix(0, ncol = ncol(logPrice), nrow = ncol(logPrice))
  for (j in 1:fastFreq) {
    # Extract subsample at fast frequency
    indices <- seq(j + nrow(logPrice) %% fastFreq, by = fastFreq, length.out = binFast)
    subLog <- logPrice[indices, ]
    subReturn <- diff(subLog)
    
    # Accumulate the outer product of returns
    rvFastSum <- rvFastSum + t(subReturn) %*% subReturn
  }
  rvFast <- rvFastSum / fastFreq
  
  # Compute TSX estimator
  tsx <- rvSlow - (fastFreq / slowFreq) * rvFast
  
  # Return annualized TSX covariance matrix
  return(tsx * 252)
}
       
